この章では、特に非同期ソフトウェアシステムに適用される明示的状態論理モデル検査の方法論について説明します。
その名が示すように、明示的状態モデル・チェッカでは、システムの状態記述子は、すべての状態遷移と同様に、シンボリックではなく明示的な形式で保持されます。
抽象化技術と部分次数削減アルゴリズムを使用して探索空間を最小化し、高度なストレージ技術を使用して、この形式の検証を非常に大きなシステム・サイズにまで拡張することができます。
明示状態モデル検査のための基本的なアルゴリズムは、1970年代後半から1980年代前半に開発されました。
これらのアルゴリズムのより高度なバージョンは、現在も活発な研究が行われています。

モデル検査手順の実装に使用できる多くの異なるアプローチがあります。
最初の方法の1つは、1970年代に早くも研究されていた基本的な到達性分析技術に遡ることができますが、明示的状態モデル検査がその起源です。
明示状態モデル検査は、ソフトウェア検証、特に相互作用する非同期プロセスのシステムの検証に適していることがわかりました。
明示状態技術は、部分次数削減技術（本ハンドブック[25]の第6章で詳しく説明しています）との統合により、その威力を大いに発揮してきました。
これにより、非同期ソフトウェアシステムのための部分次数削減を伴う明示的状態アプローチの使用は、例えば同期回路の検証における記号的モデルチェック技術の使用と比較して、非常に競争力のあるものになりました[2, 7, 15]。
基本的な到達性解析は、不変量やアサーションの妥当性、マルチプロセスシステムにおけるデッドロックの有無などの安全性の検証に最も容易に適用できます。
しかし、これから見るように、明示的状態モデル検査アルゴリズムは、線形時空論理（LTL）で形式化できるすべての特性や、より広義にはすべてのω正則特性のクラスを含む、生き生きとした特性の証明にも使用することができます。
明示的状態モデル検査手順は、いくつかの重要な仮定が満たされている場合にのみ可能である。
第一に、検証の対象となるシステムは有限状態でなければならない。
システムの状態は、抽象化された有限の値のタプルであり、任意の有限領域から選択することができます。
システムは状態遷移を実行することで状態を変化させることができます。
これは、システムが（有限状態オートマトンの集合として）表現できると仮定していることを意味します。
第二の仮定は、システムの実行は、別々の状態遷移の連続としてモデル化できるということです。
これは、有限状態オートマトンとしてモデル化された複数のプロセスを持つシステムを記述する場合でも、システム実行の効果は、個々のプロセス動作の任意のインターリーブによってモデル化できることを意味します。
このアプローチでは、マルチスレッドシステムにおいて、メインCPUが一度に1つの命令を実行し、スケジューリングの決定に基づいて異なるプロセスの動作をインターリーブしながら、1つのCPU上でのプロセススケジューリングを正確に表現することができます。
ただし、マルチコアシステムやネットワークシステムなど、複数のCPUでのプロセス実行を表現することも可能です。
例えば、マルチコアシステムでは、複数のプロセスが同時に共有メモリにアクセスすることはできません。
読み取りと書き込みの正確な順序を常に知ることはできませんが、ある程度の粒度のレベルでは、実際の実行順序を表すインターリーブ順序を決定することは常に可能です。
しかし、非同期ハードウェア回路では必ずしも同じことが言えるわけではなく、モデル検査には別のアプローチが必要です。
到達性解析のための自動化ツールを構築する最初の試みは、通信プロトコルの単純な有限状態記述を対象としていました。
1979年、Jan Hajekはグラフ探索ツール[12]を使用して、Tanenbaumのコンピュータネットワーク入門書[27]のプロトコルの特性を検証しました。
同じ頃、Colin WestとPitro Zafiropuloは、別のプロトコルであるCCITT勧告X.21の検証のための到達性分析手順を開発し、一連の欠陥を特定した [29, 30]。1980年、後に論理モデルチェッカSpinとなる最初のバージョンがBell Labsで開発されました。
panと呼ばれるこのツールは、その後、電話交換システムや通信プロトコルの有限状態モデルにおける安全特性の違反を明らかにするために使用され、成功を収めました[13]。
